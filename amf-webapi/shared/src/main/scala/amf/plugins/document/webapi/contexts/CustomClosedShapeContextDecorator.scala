package amf.plugins.document.webapi.contexts
import amf.core.model.domain.Shape
import amf.core.remote.Vendor
import amf.plugins.document.webapi.contexts.parser.{OasLikeSpecVersionFactory, OasLikeWebApiContext}
import amf.plugins.document.webapi.parser.spec.SpecSyntax
import org.yaml.model.{YMap, YNode, YPart}

class CustomClosedShapeContextDecorator(decorated: OasLikeWebApiContext, syntaxOverride: SpecSyntax)
    extends OasLikeWebApiContext(
      decorated.loc,
      decorated.refs,
      decorated.options,
      decorated,
      Some(decorated.declarations)
    ) {
  override val syntax: SpecSyntax = decorated.syntax
  override val vendor: Vendor     = decorated.vendor

  override def link(node: YNode): Either[String, YNode] = decorated.link(node)

  override def autoGeneratedAnnotation(s: Shape): Unit = decorated.autoGeneratedAnnotation(s)

  override val factory: OasLikeSpecVersionFactory = decorated.factory

  override def specificClosedShape(node: String, shape: String, ast: YMap): Unit =
    closedShape(node, ast, shape, syntaxOverride)

  override protected def throwClosedShapeError(node: String, message: String, entry: YPart, isWarning: Boolean): Unit = {
    val key  = node.split("/").last
    val warn = syntaxOverride.nodes.contains(key)
    super.throwClosedShapeError(node, message, entry, warn)
  }

  override def makeCopy(): OasLikeWebApiContext = decorated.makeCopy()
}
